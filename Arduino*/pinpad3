
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <LiquidCrystal.h>
#include <stdlib.h>
#define RST_PIN   11     // Configurable, see typical pin layout above
#define SS_PIN    53   // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance

/* Set your new UID here! */
#define NEW_UID {0xDE, 0xAD, 0xBE, 0xEF}

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//define the cymbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {5, 4, 3, 2}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 
MFRC522::MIFARE_Key key;
int buzzer = 12;//the pin of the active buzzer
LiquidCrystal lcd(A7, A6, A5, A4, A3, A2,A1);
char pinCode[4];
int buttonpin = 18;
volatile bool buttonPressed = false;


void display()
{
  //Serial.begin(9600);
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
  
  // Print a message to the LCD.
  lcd.print("Enter PIN:");
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
 
  // print the number of seconds since reset:
}
void setup() { 
    pinMode(buttonpin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(buttonpin), buttonInterrupt, CHANGE); // attach the interrupt
    
  pinMode(buzzer,OUTPUT);//initialize the buzzer pin as an output
  Serial.begin(9600);  // Initialize serial communications with the PC
 // while (!Serial);     // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522 card
  Serial.println(F("Warning: this example overwrites the UID of your UID changeable card, use with care!"));
  
  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 12; i++) {
    key.keyByte[i] = 0xFF;
  }
}

// Setting the UID can be as simple as this:
//void loop() {
//  byte newUid[] = NEW_UID;
//  if ( mfrc522.MIFARE_SetUid(newUid, (byte)4, true) ) {
//    Serial.println("Wrote new UID to card.");
//  }
//  delay(1000);
//}
void press(){
if (buttonPressed) {
    lcd.setCursor(0, 0); lcd.clear();   
    lcd.print("Reset");   
     delay(1000);
     lcd.clear();


    buttonPressed = false; // reset the button press flag
  }
}
// But of course this is a more proper approach
void loop() {

  press();
  // other code here
  // Look for new cards, and select one if present
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() ) {
    display();
      press();
    
   for(int i = 0 ;i < 4;++i){
        pinCode[i] = customKeypad.getKey();
    press();
        if(!pinCode[i]){
          i--;
        }else{
            lcd.setCursor(i, 1);
             lcd.print("*");
        } 
   
   //output an f
    }
     press();
      if(atoi(pinCode) == 1234){
        lcd.print(" Ready!");
        delay(1000);
      }
      else{
        lcd.print(" Try Again!");
      } 
     
      press();
      // return;
      delay(50);
  }
    press();

  // Now a card is selected. The UID and SAK is in mfrc522.uid.
    digitalWrite(buzzer,HIGH);
      delay(150);//wait for 1ms
  
    digitalWrite(buzzer,LOW);
      delay(150);//wait for 1

  // Dump UID
  Serial.print(F("Card UID:"));
  for (byte i = 0; i < mfrc522.uid.size; i++) { 
   
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX); 

  } 
  press();
  Serial.println();

  // Dump PICC type
//  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
//  Serial.print(F("PICC type: "));
//  Serial.print(mfrc522.PICC_GetTypeName(piccType));
//  Serial.print(F(" (SAK "));
//  Serial.print(mfrc522.uid.sak);
//  Serial.print(")\r\n");
//  if (  piccType != MFRC522::PICC_TYPE_MIFARE_MINI 
//    &&  piccType != MFRC522::PICC_TYPE_MIFARE_1K
//    &&  piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
//    Serial.println(F("This sample only works with MIFARE Classic cards."));
//    return;
//  }

  // Set new UID
  byte newUid[] = NEW_UID;
  if ( mfrc522.MIFARE_SetUid(newUid, (byte)4, true) ) {
    Serial.println(F("Wrote new UID to card."));
  }
  
  // Halt PICC and re-select it so DumpToSerial doesn't get confused
  mfrc522.PICC_HaltA();
  if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {
    return;
  }
  
  // Dump the new memory contents
  Serial.println(F("New UID and contents:"));
  mfrc522.PICC_DumpToSerial(&(mfrc522.uid));

  delay(2000);
}

void buttonInterrupt() {
  buttonPressed = true;
}
